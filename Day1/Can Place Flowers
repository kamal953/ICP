class Solution {
    public boolean canPlaceFlowers(int[] flowerbed, int n) {
        int k=flowerbed.length;
        if(n==0){
            return true;

        }
        for(int i=0;i<k;i++){
            if(flowerbed[i]==0){
                boolean leftkhali=(i==0) || flowerbed[i-1]==0;
                boolean rightkhali=(i==k-1) || flowerbed[i+1]==0;

                if(leftkhali && rightkhali){
                    flowerbed[i]=1;
                    n--;
                    if(n==0){
                        return true;
                    }
                }
            }
        }return false;
    }
}
// Time Complexity: O(N)
// - N = length of the flowerbed array
// - We iterate through the array once, checking conditions at each index

// Space Complexity: O(1)
// - No extra space used beyond a few variables
// - Modifies the input array in-place without allocating additional memory
