import java.util.Arrays;

class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums);
        int closestSum = nums[0] + nums[1] + nums[2];

        for (int k = 0; k < nums.length - 2; k++) {
            int i = k + 1;
            int j = nums.length - 1;

            while (i < j) {
                int sum = nums[k] + nums[i] + nums[j];

                if (Math.abs(target - sum) < Math.abs(target - closestSum)) {
                    closestSum = sum;
                }

                if (sum < target) {
                    i++;
                } else {
                    j--;
                }
            }
        }

        return closestSum;
    }
}
// Time Complexity: O(N^2)
// - Sorting takes O(N log N)
// - The nested loop structure (outer loop + two pointers) runs in O(N^2) time
// - Overall: O(N^2) dominates

// Space Complexity: O(1)
// - No extra space used beyond a few variables
// - Sorting is in-place, and no auxiliary data structures are used
