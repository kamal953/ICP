class Solution {
    public int largestPerimeter(int[] nums) {
        int n=nums.length;
        int MaxPerimeter=0;
        Arrays.sort(nums);
        for(int i=n-1;i>=2;i--){
        int a=nums[i];
        int b= nums[i-1];
        int c=nums[i-2];
        
       
            if(validTriangle(a,b,c)){
            int sum=a+b+c;
            MaxPerimeter=Math.max(sum,MaxPerimeter);
            break;
         }
        }
         return MaxPerimeter;

        
}
private   static boolean validTriangle(int a ,int b, int c){
    return a+b>c && b+c>a && a+c>b;  
}  
}

// Time Complexity: O(n log n) — Sorting the array dominates the runtime. The loop runs in O(n) but is secondary.
// Space Complexity: O(1) — No extra space used beyond input array and a few variables.

