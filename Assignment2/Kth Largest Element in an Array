class Solution {
    public int findKthLargest(int[] nums, int k) {
       PriorityQueue<Integer> pq=new PriorityQueue<>();
       for(int i=0;i<k;i++){
        pq.add(nums[i]);
       }
       for(int i=k;i<nums.length;i++){
        if(nums[i]>pq.peek()){
            pq.poll();
            pq.add(nums[i]);
        }
       }return pq.peek();

    }
}
// Time Complexity: O(n log k) — inserting into the min-heap takes log k time, done n times
// Space Complexity: O(k) — min-heap stores k elements
