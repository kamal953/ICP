class Solution {
    private static final int[] di = {1, -1, 0, 0};
    private static final int[] dj = {0, 0, 1, -1};

    private static class Cell {
        int height, row, col;
        Cell(int h, int i, int j) {
            height = h;
            row = i;
            col = j;
        }
    }

    public int trapRainWater(int[][] heightMap) {
        int m = heightMap.length, n = heightMap[0].length;
        if (m <= 2 || n <= 2) return 0;

        boolean[][] visited = new boolean[m][n];
        PriorityQueue<Cell> minHeap = new PriorityQueue<>(Comparator.comparingInt(c -> c.height));

     
        for (int i = 0; i < m; i++) {
            minHeap.offer(new Cell(heightMap[i][0], i, 0));
            minHeap.offer(new Cell(heightMap[i][n - 1], i, n - 1));
            visited[i][0] = visited[i][n - 1] = true;
        }

        for (int j = 1; j < n - 1; j++) {
            minHeap.offer(new Cell(heightMap[0][j], 0, j));
            minHeap.offer(new Cell(heightMap[m - 1][j], m - 1, j));
            visited[0][j] = visited[m - 1][j] = true;
        }

        int waterLevel = 0, trapped = 0;

        while (!minHeap.isEmpty()) {
            Cell cell = minHeap.poll();
            waterLevel = Math.max(waterLevel, cell.height);

            for (int k = 0; k < 4; k++) {
                int ni = cell.row + di[k], nj = cell.col + dj[k];
                if (ni < 0 || ni >= m || nj < 0 || nj >= n || visited[ni][nj]) continue;

                visited[ni][nj] = true;
                int currH = heightMap[ni][nj];
                if (currH < waterLevel) trapped += waterLevel - currH;
                minHeap.offer(new Cell(currH, ni, nj));
            }
        }

        return trapped;
    }
}
// m = number of rows in the grid
// n = number of columns in the grid

//  Time Complexity: O(m × n × log(m × n))
// - Each cell is pushed and popped from the min-heap once
// - Heap operations (insert, remove) take O(log(m × n)) time
// - Total of m × n heap operations → O(m × n × log(m × n))

//  Space Complexity: O(m × n)
// - visited[][] boolean matrix uses O(m × n) space
// - minHeap stores up to m × n cells in worst case
// - No additional auxiliary structures beyond that
